{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d03d080",
   "metadata": {},
   "source": [
    "## Conditional Statement\n",
    "조건문은 특정한 조건에 해당될(참일) 때만 동작하도록 합니다.<br>\n",
    "if ~ else ~의 구조로 작성하며 여러번 중첩(nested)해서 사용합니다.<br>\n",
    "파이썬에서의 조건문은 들여쓰기를 해야합니다. (Tab or space * 4) <br>\n",
    "이를 지키지 않는 경우는 Syntax 오류가 발생합니다.\n",
    "\n",
    "### True/False\n",
    "일반적으로 조건은 bool 타입을 사용해 참/거짓을 판별합니다.<br>\n",
    "- True: 참\n",
    "- False: 거짓"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9f222743",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "조건문이 참1\n"
     ]
    }
   ],
   "source": [
    "# if문의 기본 형태\n",
    "if True:\n",
    "    print('조건문이 참1')\n",
    "if False:\n",
    "    print('조건문이 참2')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "88f5a8a2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "조건문이 참1\n",
      "조건문이 거짓2\n"
     ]
    }
   ],
   "source": [
    "# if else문의 기본 형태\n",
    "if True:\n",
    "    print('조건문이 참1')\n",
    "else:\n",
    "    print('조건문이 거짓1')\n",
    "    \n",
    "if False:\n",
    "    print('조건문이 참2')\n",
    "else:\n",
    "    print('조건문이 거짓2')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "dfd7e1a9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "모든 조건이 거짓\n"
     ]
    }
   ],
   "source": [
    "# if ~ elif ~ else ~ 문의 기본 형태\n",
    "'''\n",
    "if 첫번째 조건:\n",
    "    A\n",
    "elif 두번째 조건:\n",
    "    B\n",
    "elif 세번째 조건:\n",
    "    C\n",
    "else:\n",
    "    Final\n",
    "'''\n",
    "condition1, condition2, condition3 = False, False, False\n",
    "if condition1:\n",
    "    print('첫번째 조건이 참')\n",
    "elif condition2:\n",
    "    print('두번째 조건이 참')\n",
    "elif condition3:\n",
    "    print('세번째 조건이 참')\n",
    "else:\n",
    "    print('모든 조건이 거짓')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84e14702",
   "metadata": {},
   "source": [
    "### 다른 데이터 타입의 bool 활용\n",
    "다른 데이터 타입의 경우에도 조건문에서 True/False의 역할을 할 수 있습니다.\n",
    "1. str\n",
    "    - '': False\n",
    "    - 그 외의 문자열: True\n",
    "2. int\n",
    "    - 0: False\n",
    "    - 그 외의 정수: True\n",
    "3. float\n",
    "    - 0.0: False\n",
    "    - 그 외의 실수: True\n",
    "\n",
    "<b>=> 프로그래밍 문제에서 다음과 같은 방식으로 자주 조건문을 판별하니 이를 잘 기억해두시기를 바랍니다.</b>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "1734ee97",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n",
      "True\n",
      "True\n",
      "True\n",
      "두번째 조건문이 참\n",
      "False\n",
      "True\n",
      "False\n",
      "True\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "# if 조건문에서의 str\n",
    "print(bool('')) # False\n",
    "print(bool(' ')) # True\n",
    "print(bool('0')) # True\n",
    "print(bool('True')) # True\n",
    "\n",
    "if '':\n",
    "    print('첫번째 조건문이 참')\n",
    "elif '0':\n",
    "    print('두번째 조건문이 참')\n",
    "else:\n",
    "    print('모든 조건문이 거짓')\n",
    "    \n",
    "# if 조건문에서의 int\n",
    "print(bool(0)) # False\n",
    "print(bool(-1)) # True\n",
    "\n",
    "# if 조건문에서의 float\n",
    "print(bool(0.0)) # False\n",
    "print(bool(0.0000000001)) # True\n",
    "\n",
    "# ?\n",
    "print(bool(int('0'))) # False"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5ef831c",
   "metadata": {},
   "source": [
    "### 논리/관계 연산자\n",
    "논리/관계 연산자를 통해 참과 거짓을 더욱 다양하게 표현할 수 있습니다.\n",
    "논리연산자\n",
    "- and: True and True일 때만 True\n",
    "- or: False or False일 때만 False\n",
    "- not: True일 때 False, False일 때 True\n",
    "\n",
    "관계연산자\n",
    "- \\>: 왼쪽이 오른쪽 값보다 더 클 때 True\n",
    "- <: 왼쪽이 오른쪽 값보다 더 작을 때 True\n",
    "- \\>=: 왼쪽이 오른쪽 값보다 더 크더나 같을 때 True\n",
    "- <=: 왼쪽이 오른쪽 값보다 더 작거나 같을 때 True\n",
    "- ==: 왼쪽과 오른쪽 값이 같을 때 True\n",
    "- !=: 왼쪽과 오른쪽 값이 같지 않을 때 True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "0a4e33a3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "False\n",
      "False\n",
      "False\n",
      "False\n",
      "----------------------------------------------------------------------------------------------------\n",
      "True\n",
      "True\n",
      "True\n",
      "False\n",
      "True\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "# 논리 연산자\n",
    "# and\n",
    "print(True and True) # True\n",
    "print(False and True)\n",
    "print(True and False)\n",
    "print(False and False)\n",
    "\n",
    "print(True and True and True and True and False) # True and False -> False\n",
    "\n",
    "print('--'*50)\n",
    "# or\n",
    "print(True or True)\n",
    "print(True or False)\n",
    "print(False or True)\n",
    "print(False or False) # False\n",
    "\n",
    "print(False or False or False or False or True) # True\n",
    "print(0 and 0 or True) # True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "2efa691e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "3\n",
      "3\n",
      "0\n",
      "0\n"
     ]
    }
   ],
   "source": [
    "# shortcut\n",
    "# print(2/0) ZeroDivisionError\n",
    "print(True or 2/0) # True\n",
    "print(False or 3) # 3\n",
    "print(True and 3) # 3\n",
    "print(0 and True) # 0 or False\n",
    "print(0 or 0 and True) # 연산자 우선순위 고려 / and > or "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "b10226b7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n",
      "True\n",
      "True\n",
      "False\n",
      "True\n",
      "False\n",
      "True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<>:9: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n",
      "<>:10: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n",
      "<>:9: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n",
      "<>:10: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n",
      "C:\\Users\\ADMINI~1\\AppData\\Local\\Temp/ipykernel_10944/1609403548.py:9: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n",
      "  print(2 is 2.0) # False\n",
      "C:\\Users\\ADMINI~1\\AppData\\Local\\Temp/ipykernel_10944/1609403548.py:10: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n",
      "  print(2 is 2) #\n"
     ]
    }
   ],
   "source": [
    "# 관계 연산자\n",
    "print(2 > 3) # False\n",
    "print(3 >= 3) # True\n",
    "print(2 == 2) # True\n",
    "print(2 != 2) # False\n",
    "\n",
    "# 정수와 실수의 ==: 데이터 타입이 다르더라도 값을 기준으로 판단\n",
    "print(2 == 2.0) # True\n",
    "print(2 is 2.0) # False\n",
    "print(2 is 2) # True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "1edf3fca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n",
      "False\n",
      "True\n",
      "65\n",
      "66\n",
      "97\n",
      "A\n",
      "b\n"
     ]
    }
   ],
   "source": [
    "# 문자열간의 크기 비교\n",
    "# - 사전순으로 크기 비교\n",
    "print('a' > 'b') # False\n",
    "print('a' >= 'b') # False\n",
    "print('a' != 'b') # True\n",
    "\n",
    "# ord: 문자의 아스키 코드 값을 반환합니다.\n",
    "print(ord('A'))\n",
    "print(ord('B'))\n",
    "print(ord('a'))\n",
    "\n",
    "# chr: 아스키 코드 값을 문자로 반환합니다.\n",
    "print(chr(65))\n",
    "print(chr(98))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "49f0353d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ab는 소문자 알파벳입니다.\n"
     ]
    }
   ],
   "source": [
    "# 알파벳 검증\n",
    "alpha = 'ab'\n",
    "if 'a' <= alpha and alpha <= 'z':\n",
    "    print(f'{alpha}는 소문자 알파벳입니다.')\n",
    "else:\n",
    "    print(f'{alpha}는 소문자 알파벳이 아닙니다.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "c794c201",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10 2\n",
      ">\n"
     ]
    }
   ],
   "source": [
    "'''\n",
    "실습 문제 1\n",
    "두 정수 A와 B가 주어졌을 때, A와 B를 비교하는 프로그램을 작성하시오.\n",
    "\n",
    "입력\n",
    "첫째 줄에 A와 B가 주어진다. A와 B는 공백 한 칸으로 구분되어져있다.\n",
    "\n",
    "출력\n",
    "- A가 B보다 큰 경우에는 '>'를 출력한다.\n",
    "- A가 B보다 작은 경우에는 '<'를 출력한다.\n",
    "- A가 B와 같은 경우에는 '=='를 출력한다.\n",
    "'''\n",
    "A, B = map(int, input().split())\n",
    "if A > B:\n",
    "    print('>')\n",
    "elif A < B:\n",
    "    print('<')\n",
    "else:\n",
    "    print('==')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "172d43ac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "80\n",
      "B\n",
      "B\n"
     ]
    }
   ],
   "source": [
    "'''\n",
    "실습 문제 2\n",
    "\n",
    "학생들에게 점수를 입력받아\n",
    "점수가 100점 이하 90점 이상인 경우에는 A를 출력하고,\n",
    "점수가 90점 미만 80점 이상인 경우에는 B를 출력하고,\n",
    "점수가 80점 미만 70점 이상인 경우에는 C를 출력하고,\n",
    "점수가 70점 미만 60점 이상인 경우에는 D를 출력하고,\n",
    "그 외의 점수에는 F를 출력하는 프로그램을 만드시오.\n",
    "\n",
    "조건: 점수는 0이상 100 이하의 정수 값을 가집니다.\n",
    "\n",
    "입력 예시 1\n",
    "90\n",
    "\n",
    "출력 예시 1\n",
    "A\n",
    "\n",
    "입력 예시 2\n",
    "75\n",
    "\n",
    "출력 예시 2\n",
    "C\n",
    "\n",
    "입력 예시 3\n",
    "13\n",
    "\n",
    "출력 예시 3\n",
    "F\n",
    "'''\n",
    "\n",
    "# if 구문만 사용해서 문제 풀이\n",
    "score = int(input())\n",
    "if score >= 90:\n",
    "    print('A')\n",
    "if score < 90 and score >= 80: # 80 <= score < 90 -> 파이썬식 스타일\n",
    "    print('B')\n",
    "if score < 80 and score >= 70:\n",
    "    print('C')\n",
    "if score < 70 and score >= 60:\n",
    "    print('D')\n",
    "if score < 60:\n",
    "    print('F')\n",
    "    \n",
    "# if ~ elif ~ else 구문을 활용해서 문제 풀이\n",
    "if score >= 90:\n",
    "    print('A')\n",
    "elif 80 <= score:\n",
    "    print('B')\n",
    "elif 70 <= score:\n",
    "    print('C')\n",
    "elif 60 <= score:\n",
    "    print('D')\n",
    "else:\n",
    "    print('F')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
